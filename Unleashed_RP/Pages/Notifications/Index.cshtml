@page
@model Unleashed_RP.Pages.Notifications.IndexModel
@{
    ViewData["Title"] = "My Notifications";
}

<div class="container mt-5">
    <h1 class="mb-4 text-center">Your Notifications ✨</h1>
    <hr>
    <div class="card shadow-lg border-0">
        <div class="card-body p-4">
            @if (Model.NotificationUsers == null || !Model.NotificationUsers.Any())
            {
                <div class="alert alert-info text-center py-4" role="alert">
                    <p class="lead mb-0">Looks like you're all caught up! No new notifications here. 🎉</p>
                </div>
            }
            else
            {
                <ul class="list-group list-group-flush">
                    @foreach (var item in Model.NotificationUsers)
                    {
                        <li class="list-group-item list-group-item-action @(item.IsNotificationViewed.GetValueOrDefault(false) ? "" : "list-group-item-primary fw-bold")"
                            style="position: relative; margin-bottom: 10px; border-radius: .3rem;">
                            @* Added margin-bottom and border-radius *@
                            <div class="d-flex w-100 justify-content-between align-items-center">
                                @* Align items to center vertically *@
                                @* This div handles the clickable area for viewing notification details *@
                                <div onclick="location.href='@Url.Page("./Details", new { id = item.NotificationId })'" class="flex-grow-1 me-3" style="cursor: pointer;">
                                    <h5 class="mb-1">@Html.DisplayFor(modelItem => item.NotificationTitle)</h5>
                                </div>

                                <div class="d-flex flex-column align-items-end">
                                    @* Align content to the end (right) *@
                                    <small class="text-muted mb-2">@item.NotificationCreatedAt.ToString("MMM dd, yyyy hh:mm tt")</small>

                                    <form method="post" class="m-0">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="notificationId" value="@item.NotificationId" />
                                        <button type="submit" class="btn btn-sm btn-outline-danger" @* Changed to btn-sm and btn-outline-danger for better fit and style *@
                                                onclick="event.stopPropagation(); return confirm('Are you absolutely sure you want to delete this notification? This action cannot be undone.');">
                                            <i class="bi bi-trash"></i> Delete @* Added icon class and 'Delete' text for clarity *@
                                        </button>
                                    </form>
                                </div>
                            </div>
                            @if (!item.IsNotificationViewed.GetValueOrDefault(false))
                            {
                                <span class="badge bg-info text-dark position-absolute top-0 start-0 translate-middle rounded-pill">New!</span>
                            }
                        </li>
                    }
                </ul>         
                    int currentPage = (int)ViewData["CurrentPage"];
                    int totalPages = (int)ViewData["Pages"];
                <nav aria-label="Notifications pagination" class="mt-4">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <a class="page-link"
                               asp-page="./Index"
                               asp-route-pageIndex="@(currentPage - 1)"
                               asp-route-SearchString="@ViewData["SearchString"]"
                               aria-label="Previous">
                                &laquo; Previous
                            </a>
                        </li>
                        @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                        {
                            <li class="page-item @(i == currentPage ? "active" : "")">
                                <a class="page-link"
                                   asp-page="./Index"
                                   asp-route-pageIndex="@(i)"
                                   asp-route-SearchString="@ViewData["SearchString"]">
                                    @i
                                    @if (i == currentPage)
                                    {
                                        <span class="visually-hidden">(current)</span>
                                    }
                                </a>
                            </li>
                        }
                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <a class="page-link"
                               asp-page="./Index"
                               asp-route-pageIndex="@(currentPage + 1)"
                               asp-route-SearchString="@ViewData["SearchString"]"
                               aria-label="Next">
                                Next &raquo;
                            </a>
                        </li>
                    </ul>
                </nav>
            }
        </div>
    </div>
</div>