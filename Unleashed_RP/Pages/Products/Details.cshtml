@page
@model Unleashed_RP.Pages.Products.DetailsModel

@{
    ViewData["Title"] = Model.Product.ProductName;
    var firstVariation = Model.Product.Variations?.FirstOrDefault();
    var username = HttpContext.Session.GetString("username");
}

<style>
    .product-title {
        font-size: 2rem;
        font-weight: 600;
    }

    .cursor-pointer {
        cursor: pointer;
    }

    .product-image-main {
        height: 400px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #f8f9fa;
        border-radius: 0.5rem;
        overflow: hidden;
    }

        .product-image-main img {
            max-height: 100%;
            width: auto;
            object-fit: contain;
        }

    .variation-thumbnail {
        transition: all 0.3s ease;
        border: 2px solid transparent;
    }

        .variation-thumbnail.active {
            border-color: #0d6efd;
        }

        .variation-thumbnail:hover {
            transform: scale(1.05);
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        }

    .variation-details {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 0.5rem;
        margin-top: 1rem;
    }

    .star-rating {
        color: #ffc107;
        font-size: 1.5rem;
    }

    .review-card {
        border-left: 4px solid #0d6efd;
    }

    .raters-list {
        max-height: 200px;
        overflow-y: auto;
    }

    .rater-item {
        padding: 0.5rem;
        border-bottom: 1px solid #eee;
    }

    .star-select {
        font-size: 2rem;
        color: #ccc;
        cursor: pointer;
        transition: color 0.3s;
    }

        .star-select.hovered,
        .star-select.selected {
            color: #ffc107;
        }
</style>

<div class="container my-5">
    <div class="row">
        <!-- Product Images -->
        <div class="col-md-6">
            <div class="product-image-main mb-3">
                <img src="@(firstVariation?.VariationImage ?? "https://via.placeholder.com/600x600?text=Product+Image")"
                     alt="@Model.Product.ProductName"
                     class="img-fluid rounded shadow"
                     id="mainProductImage">
            </div>
            <div class="product-thumbnails d-flex gap-2">
                @if (Model.Product.Variations != null)
                {
                    foreach (var variation in Model.Product.Variations)
                    {
                        var totalStock = variation.StockVariations.Sum(sv => sv.StockQuantity ?? 0);

                        <img src="@(variation.VariationImage ?? "https://via.placeholder.com/100x100?text=Thumb")"
                             class="img-thumbnail cursor-pointer variation-thumbnail @(variation == firstVariation ? "active" : "")"
                             style="width: 80px;"
                             onclick="changeVariation(this, '@variation.VariationImage', '@variation.Color?.ColorName', '@variation.Size?.SizeName', '@(variation.VariationPrice?.ToString("C") ?? "N/A")', '@variation.VariationId', @totalStock)"
                             alt="@variation.VariationImage">
                    }
                }
            </div>
        </div>

        <!-- Product Info -->
        <div class="col-md-6">
            <div class="product-details">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="/">Home</a></li>
                        <li class="breadcrumb-item"><a href="/Products">Products</a></li>
                        <li class="breadcrumb-item active" aria-current="page">@Model.Product.ProductName</li>
                    </ol>
                </nav>

                <h1 class="product-title mb-2">@Model.Product.ProductName</h1>
                <p class="text-muted mb-3">Brand: <span class="text-primary">@Model.Product.Brand?.BrandName</span></p>

                <!-- Rating Display -->
                @if (Model.AverageRating.HasValue)
                {
                    <div class="mb-3">
                        <div class="star-rating">
                            @for (int i = 1; i <= 5; i++)
                            {
                                if (i <= Model.AverageRating.Value)
                                {
                                    <i class="fas fa-star"></i>
                                }
                                else if (i - 0.5 <= Model.AverageRating.Value)
                                {
                                    <i class="fas fa-star-half-alt"></i>
                                }
                                else
                                {
                                    <i class="far fa-star"></i>
                                }
                            }
                            <span class="ms-2">@Model.AverageRating.Value.ToString("0.0") (@Model.Reviews.Count reviews)</span>
                        </div>
                    </div>
                }

                <div class="description mb-4">
                    <h5>Description</h5>
                    <p class="text-justify">@(string.IsNullOrEmpty(Model.Product.ProductDescription) ? "No description available" : Model.Product.ProductDescription)</p>
                </div>

                <!-- Variation Details -->
                <div class="variation-details mb-4" id="variationDetails">
                    <h5>Selected Variation</h5>
                    <table class="table table-sm">
                        <tbody>
                            <tr>
                                <th>Color</th>
                                <td id="variationColor">@(firstVariation?.Color?.ColorName ?? "N/A")</td>
                            </tr>
                            <tr>
                                <th>Size</th>
                                <td id="variationSize">@(firstVariation?.Size?.SizeName ?? "N/A")</td>
                            </tr>
                            <tr>
                                <th>Price</th>
                                <td id="variationPrice">@(firstVariation?.VariationPrice?.ToString("C") ?? "N/A")</td>
                            </tr>
                            <tr>
                                <th>Availability:</th>
                                <td id="variationStock" class="fw-semibold">
                                    @{
                                        var firstVariationStock = firstVariation?.StockVariations.Sum(sv => sv.StockQuantity ?? 0) ?? 0;
                                    }
                                    @if (firstVariationStock > 0)
                                    {
                                        <span class="text-success">In Stock (@firstVariationStock available)</span>
                                    }
                                    else
                                    {
                                        <span class="text-danger">Out of Stock</span>
                                    }
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="add-to-cart mb-4">
                    <form method="post" asp-page-handler="AddToCart" asp-route-id="@Model.Product.ProductId">
                        <input type="hidden" name="SelectedVariationId" id="selectedVariationId" value="@firstVariation?.VariationId" />
                        <input type="hidden" name="Quantity" id="selectedQuantity" value="1" />

                        <div class="input-group mb-3" style="max-width: 150px;">
                            <button class="btn btn-outline-secondary" type="button" onclick="decrementQuantity()">-</button>
                            <input type="number" disabled class="form-control text-center" value="1" id="quantityInput" min="1">
                            <button class="btn btn-outline-secondary" type="button" onclick="incrementQuantity()">+</button>
                        </div>

                        <button type="submit" class="btn btn-danger btn-lg w-100">
                            <i class="fas fa-shopping-cart me-2"></i> Add to Cart
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Reviews Section -->
    <div class="row mt-5">
        <div class="col-md-8">
            <h3 class="mb-4">Customer Reviews</h3>

            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success">@TempData["SuccessMessage"]</div>
            }
            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
            }

            <!-- Add Review Form -->
            @* @if (!string.IsNullOrEmpty(username))
            {
                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title">Add Rating</h5>
                        <form method="post" asp-page-handler="AddReview">
                            <input type="hidden" name="productId" value="@Model.Product.ProductId" />
                            <div class="mb-3">
                                <label for="rating" class="form-label">Rating</label>
                                <div class="star-rating-select mb-2" id="starRatingInput">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        <i class="far fa-star star-select" data-value="@i"></i>
                                    }
                                </div>
                                <input type="hidden" asp-for="NewReview.ReviewRating" id="ratingValue" required />
                            </div>
                            <button type="submit" class="btn btn-primary">Submit Rating</button>
                        </form>
                    </div>
                </div>
            }
            else
            {
                <div class="alert alert-info">
                    <a href="/Authentication/Login?returnUrl=@Url.Page("/Products/Details", new { id = Model.Product.ProductId })" class="alert-link">Login</a> to rating.
                </div>
            } *@

            <!-- Reviews List -->
            @if (Model.Reviews.Any())
            {
                foreach (var review in Model.Reviews)
                {
                    <div class="card mb-3 review-card">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h5 class="card-title">@review.User.UserFullname</h5>
                                    <div class="star-rating mb-2">
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            <i class="@(i <= review.ReviewRating ? "fas" : "far") fa-star"></i>
                                        }
                                    </div>
                                </div>
                                <small class="text-muted">@review.ReviewCreatedAt?.ToString("MMM dd, yyyy") ?? "N/A"</small>
                            </div>

                            <!-- Edit/Delete buttons for review owner -->
                            @if (username == review.User.UserUsername)
                            {
                                <div class="d-flex gap-2 mt-2">
                                    <button class="btn btn-sm btn-outline-primary" data-bs-toggle="modal" data-bs-target="#editReviewModal-@review.ReviewId">
                                        Edit
                                    </button>
                                    <form method="post" asp-page-handler="DeleteReview">
                                        <input type="hidden" name="reviewId" value="@review.ReviewId" />
                                        <input type="hidden" name="productId" value="@Model.Product.ProductId" />
                                        <button type="submit" class="btn btn-sm btn-outline-danger">Delete</button>
                                    </form>
                                </div>

                                <!-- Edit Review Modal -->
                                <div class="modal fade" id="editReviewModal-@review.ReviewId" tabindex="-1" aria-hidden="true">
                                    <div class="modal-dialog">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h5 class="modal-title">Edit Review</h5>
                                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                            </div>
                                            <form method="post" asp-page-handler="EditReview">
                                                <div class="modal-body">
                                                    <input type="hidden" name="reviewId" value="@review.ReviewId" />
                                                    <input type="hidden" name="productId" value="@Model.Product.ProductId" />
                                                    <div class="mb-3">
                                                        <label class="form-label">Rating</label>
                                                        <select class="form-select" asp-for="NewReview.ReviewRating" required>
                                                            <option value="">Select rating</option>
                                                            @for (int i = 1; i <= 5; i++)
                                                            {
                                                                <option value="@i" selected="@(i == review.ReviewRating)">@i Star@(i > 1 ? "s" : "")</option>
                                                            }
                                                        </select>
                                                    </div>
                                                </div>
                                                <div class="modal-footer">
                                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                                    <button type="submit" class="btn btn-primary">Save changes</button>
                                                </div>
                                            </form>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            }
        </div>

        <!-- Raters List Section -->
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title">People who rated this product</h5>
                </div>
                <div class="card-body raters-list">
                    @if (Model.Reviews.Any())
                    {
                        foreach (var review in Model.Reviews)
                        {
                            <div class="rater-item">
                                <div class="d-flex justify-content-between align-items-center">
                                    <span>@review.User.UserFullname</span>
                                    <div class="star-rating small">
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            <i class="@(i <= review.ReviewRating ? "fas" : "far") fa-star"></i>
                                        }
                                    </div>
                                </div>
                                <small class="text-muted">@review.ReviewCreatedAt?.ToString("MMM dd, yyyy") ?? "N/A"</small>

                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-muted">No ratings yet</div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // --- DATA SETUP ---
        const variationStockLevels = {
        @foreach (var v in Model.Product.Variations)
        {
            var stockSum = v.StockVariations.Sum(sv => sv.StockQuantity ?? 0);
            <text>"@v.VariationId": @stockSum, </text>
        }
        };

        // --- GLOBAL VARIABLES ---
        let currentMaxQuantity = variationStockLevels[@(firstVariation?.VariationId ?? 0)] || 0;
        const quantityInput = document.getElementById('quantityInput');
        const hiddenQuantityInput = document.getElementById('selectedQuantity');
        const incrementBtn = document.getElementById('incrementBtn');
        const decrementBtn = document.getElementById('decrementBtn');
        const addToCartBtn = document.getElementById('addToCartBtn');

        // --- FUNCTIONS ---
        function changeVariation(element, imageUrl, color, size, price, variationId, stock) {
            document.getElementById('mainProductImage').src = imageUrl || '/images/placeholder-image.png';
            document.getElementById('variationColor').textContent = color || 'N/A';
            document.getElementById('variationSize').textContent = size || 'N/A';
            document.getElementById('variationPrice').textContent = price || 'N/A';

            const stockElement = document.getElementById('variationStock');
            if (stock > 0) {
                stockElement.innerHTML = `<span class="text-success">In Stock (${stock} available)</span>`;
            } else {
                stockElement.innerHTML = `<span class="text-danger">Out of Stock</span>`;
            }

            document.getElementById('selectedVariationId').value = variationId;
            currentMaxQuantity = stock;
            resetQuantity();
            updateButtonStates();

            document.querySelectorAll('.variation-thumbnail').forEach(thumb => {
                thumb.classList.remove('active');
            });
            element.classList.add('active');
        }

        function incrementQuantity() {
            let currentValue = parseInt(quantityInput.value);
            if (currentValue < currentMaxQuantity) {
                quantityInput.value = ++currentValue;
                syncHiddenQuantity();
            }
            updateButtonStates();
        }

        function decrementQuantity() {
            let currentValue = parseInt(quantityInput.value);
            if (currentValue > 1) {
                quantityInput.value = --currentValue;
                syncHiddenQuantity();
            }
            updateButtonStates();
        }

        function resetQuantity() {
            quantityInput.value = (currentMaxQuantity > 0) ? 1 : 0;
            syncHiddenQuantity();
        }

        function syncHiddenQuantity() {
            hiddenQuantityInput.value = quantityInput.value;
        }

        function updateButtonStates() {
            const currentValue = parseInt(quantityInput.value);
            decrementBtn.disabled = currentValue <= 1;
            incrementBtn.disabled = currentValue >= currentMaxQuantity;

            addToCartBtn.disabled = currentMaxQuantity <= 0;
            if (currentMaxQuantity <= 0) {
                 addToCartBtn.textContent = 'Out of Stock';
                 quantityInput.value = 0; // Set quantity to 0 if out of stock
                 syncHiddenQuantity();
            } else {
                 addToCartBtn.innerHTML = '<i class="fas fa-shopping-cart me-2"></i> Add to Cart';
            }
        }

        // --- INITIALIZATION ---
        document.addEventListener('DOMContentLoaded', function () {
            updateButtonStates();

            incrementBtn.addEventListener('click', incrementQuantity);
            decrementBtn.addEventListener('click', decrementQuantity);

            quantityInput.addEventListener('change', function() {
                let value = parseInt(this.value);
                if (currentMaxQuantity === 0) {
                    value = 0;
                } else if (isNaN(value) || value < 1) {
                    value = 1;
                } else if (value > currentMaxQuantity) {
                    value = currentMaxQuantity;
                }
                this.value = value;
                syncHiddenQuantity();
                updateButtonStates();
            });

            // --- Review Stars Logic ---
            document.querySelectorAll('.star-select').forEach(star => {
                 star.addEventListener('mouseover', function () {
                    const value = parseInt(this.getAttribute('data-value'));
                    highlightStars(value);
                });
                star.addEventListener('mouseout', function () {
                    const current = parseInt(document.getElementById('ratingValue').value) || 0;
                    highlightStars(current);
                });
                star.addEventListener('click', function () {
                    const selected = parseInt(this.getAttribute('data-value'));
                    document.getElementById('ratingValue').value = selected;
                    highlightStars(selected);
                });
            });

            function highlightStars(value) {
                document.querySelectorAll('.star-select').forEach(star => {
                    const starValue = parseInt(star.getAttribute('data-value'));
                    if (starValue <= value) {
                        star.classList.add('selected');
                    } else {
                        star.classList.remove('selected');
                    }
                });
            }
        });
    </script>
}